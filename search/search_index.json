{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FACTION","text":"<p>PenTesting Report Generation and Collaboration Engine </p> <p>FACTION is your entire assessment workflow in a box. With FACTION you can:</p> <ol> <li> <p>Automate pen testing and security assessment Reports</p> </li> <li> <p>Peer review and track changes for reports</p> </li> <li> <p>Create customized DOCX templates for different assessment types and retests</p> </li> <li> <p>Real-time collaboration with assessors via the web app and Burp Suite Extensions</p> </li> <li> <p>Customizable vulnerability templates with over 75 prepopulated</p> </li> <li> <p>Easily manage assessment teams and track progress across your organization</p> </li> <li> <p>Track vulnerability remediation efforts with custom SLA warnings and alerts \u00a0</p> </li> <li> <p>Full Rest API to integrate with other tools\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0</p> </li> </ol> <p>Other Features:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0</p> <ol> <li> <p>LDAP Integration\u00a0 \u00a0 \u00a0 \u00a0</p> </li> <li> <p>OAUTH2.0 Integration</p> </li> <li> <p>SMTP integration\u00a0</p> </li> <li> <p>Extendable with Custom Plugins similar to Burp Extender.</p> </li> <li> <p>Custom Report Variables</p> </li> </ol> <p>Want to see it in action? -&gt; Faction Video Overview</p>"},{"location":"#quick-setup","title":"Quick Setup","text":"<p>Requirements - Java JDK11  - Maven (for building the project)</p> <p>Run the following commands to build the war file and deploy it to the docker container.  <pre><code>git clone git@github.com:factionsecurity/faction.git\ncd faction\nmvn clean compile war:war\ndocker-compose up --build\n</code></pre></p> <p>Once the containers are up you can navigate to http://127.0.0.1:8080 to access your FACTION instance.  On the first boot, it will ask you to create an admin account. </p>"},{"location":"#import-the-vulnerability-templates","title":"Import the Vulnerability Templates","text":"<ol> <li>Navigate to Admin -&gt; Default Vulnerabilities</li> <li>Click import VulnDB. </li> </ol>"},{"location":"#customize-reports","title":"Customize reports","text":"<p>You can find out more information about creating your own custom report templates here: Customize Report Templates</p>"},{"location":"#burp-suite-extension","title":"Burp Suite Extension","text":"<p>Burp Suite Extensions</p>"},{"location":"#dont-want-to-host-it-yourself","title":"Don't want to host it yourself?","text":"<p>We can provide hosting for your instance. All instances are single tenants so you don't have to worry about sharing infrastructure with untrusted parties. Navigate to https://www.factionsecurity.com to learn more. </p>"},{"location":"#screenshots","title":"Screenshots","text":"<p>Vulnerability Templates </p> <p>Assessment Scheduling </p> <p>Peer Review and Track Changes </p>"},{"location":"Custom%20Security%20Report%20Templates/","title":"Custom Security Report Templates","text":"<p>The Faction Report Designer allows you to create custom security report templates for each assessment type. When building reports you need to use the variables listed below. Entering these into your DOCX reports will auto-replace assessment and vulnerability text when the report is generated. You can even use the same variables in many of the assessor input fields outside of the report template (like Risk Assessment Summaries) and it will auto-populate the fields when the report is generated.</p> <p>You can download the sample templates here:  Sample Templates </p>"},{"location":"Custom%20Security%20Report%20Templates/#general-variables","title":"GENERAL VARIABLES:","text":"<p>All of these variables can be used anywhere in the DOCX template. Those with a star \u2b50\ufe0f can be used in the web interface to assist in creating common reusable templates.</p> <ul> <li>${TOC}\u00a0\u2013 Placeholder for the Table of Contents</li> <li>${summary1}\u00a0\u2013 The high level summary</li> <li>${summary2}\u00a0\u2013 The objective and scope</li> <li>${asmtId}\u00a0\u2013 Internal Database ID \u2b50\ufe0f</li> <li>${asmtAppid}\u00a0\u2013 The assigned Application ID \u2b50\ufe0f</li> <li>${asmtName}\u00a0\u2013 The Assessment Name \u2b50\ufe0f</li> <li>${asmtAssessor}\u00a0\u2013 The first assessor assigned to the assessment \u2b50\ufe0f</li> <li>${asmtAssessor_Email}\u00a0\u2013 The first assessor email address \u2b50\ufe0f</li> <li>${asmtAssessors_Lines}\u00a0\u2013 All Assessors split into lines \u2b50\ufe0f</li> <li>${asmtAssessors_Comma}\u00a0\u2013 All Assessors split into a comma delimited list \u2b50\ufe0f</li> <li>${asmtAssessor_Bullets}\u00a0\u2013 All Assessors split into a bulleted list \u2b50\ufe0f</li> <li>${remediation}\u00a0\u2013 The Remediation Person assigned to the assessment \u2b50\ufe0f</li> <li>${riskCount*}\u00a0\u2013 The number of findings at the RiskLevel 0-9 \u2b50\ufe0f</li> <li>${riskTotal}\u00a0\u2013 The total number of findings at all RiskLevels \u2b50\ufe0f</li> <li>${asmtTeam}\u00a0\u2013 The Assessor Team Name \u2b50\ufe0f</li> <li>${asmtType}\u00a0\u2013 The Type of the Assessment \u2b50\ufe0f</li> <li>${asmtStart}\u00a0\u2013 The Start date of the assessment \u2b50\ufe0f</li> <li>${asmtEnd}\u00a0\u2013 The End date of the assessment \u2b50\ufe0f</li> <li>${asmtAccessKey}\u00a0\u2013 Guid to access the client retest queue. \u2b50\ufe0f</li> <li>${today}\u00a0\u2013 Day the report is generated \u2b50\ufe0f</li> <li>${cfXXXXXX}\u00a0\u2013 Custom Fields are ones you specify in the admin interface. These are all prefixed with \u201ccf\u201d \u2b50\ufe0f</li> </ul>"},{"location":"Custom%20Security%20Report%20Templates/#vulnerability-tables-variables","title":"VULNERABILITY TABLES VARIABLES:","text":"<p>These are only available inside tables.</p> <ul> <li>${vulnTable}\u00a0\u2013 This defines a table to be a vulnerability listing table.</li> <li>${vulnName}\u00a0\u2013 The Vulnerability name</li> <li>${rec}\u00a0\u2013\u00a0Vulnerability Recommendation</li> <li>${desc}\u00a0\u2013\u00a0Vulnerability Description</li> <li>${category}\u00a0\u2013 Category of the vulnerability</li> <li>${severity}\u00a0\u2013 Severity of each vulnerability.</li> <li>${likelihood}\u00a0\u2013 Likelihood of the vulnerability</li> <li>${impact}\u00a0\u2013 Impact of the vulnerability</li> <li>${cvssScore}\u00a0\u2013 CVSS score of the vulnerability</li> <li>${cvssString}\u00a0\u2013 CVSS vector of the vulnerability</li> <li>${count}\u00a0\u2013 Row Count of the vulnerability</li> <li>${tracking}\u00a0\u2013 Tracking number of the vulnerability</li> <li>${vid}\u00a0\u2013 Vulnerability internal database id</li> <li>${cfXXXXXX}\u00a0\u2013 Custom Fields are ones you specify in the admin interface. These are all prefixed with \u201ccf\u201d</li> <li>${color \u00a0key=value,key=value}\u00a0\u2013 The color of the text is based on key-value pairs.\u00a0See below for how to set up colors.</li> <li>${cells key=value,key=value}\u00a0\u2013 The color of the table cell is based on key-value pairs.\u00a0\u00a0See below for how to set up colors.</li> <li>${loop}\u00a0\u2013 This variable tells the report generator which row will be repeated.</li> <li>${loop-*}\u00a0\u2013 This allows multiple rows to be repeated. Example ${loop-1} will repeat the row but the one below it.</li> <li>${details}\u00a0\u2013 This will insert screenshots and exploit steps for each vulnerability.</li> </ul>"},{"location":"Custom%20Security%20Report%20Templates/#example-table-summary-table","title":"Example Table Summary Table","text":"${vulnTable} ${color Critical=C00000,High=FFC000} ID Finding Name Impact Severity ${loop} ${count}. ${vulnName} ${impact} ${severity}"},{"location":"Custom%20Security%20Report%20Templates/#example-table-detail-table","title":"Example Table Detail Table","text":"${vulnTable} ${cells Critical=8064a2,High=c0504d,Medium=e68e00, Low=33D7FF,Recommended=081417,Informational=657376} ${loop-5} ## 1\u00a0 ${vulnName} ${severity} CVSS: ${cvssString} ${cvssScore} Category: ${category} Description:${desc} Recommendation:${rec} ${details} <p>**Why is the heading yellow?!?! Check here</p>"},{"location":"Custom%20Security%20Report%20Templates/#vulnerability-block-variables","title":"VULNERABILITY BLOCK VARIABLES:","text":"<p>For when you do not want to use tables to display your vulnerability information. You can use the following variables for inserting vulnerability information outside of a table</p> <ul> <li>${fiBegin} / ${fiEnd}\u00a0\u2013 Block to repeat against all findings.</li> <li>${vulnName}\u00a0\u2013 The Vulnerability name</li> <li>${rec}\u00a0\u2013\u00a0Vulnerability Recommendation</li> <li>${desc}\u00a0\u2013\u00a0Vulnerability Description</li> <li>${category}\u00a0\u2013 Category of the vulnerability</li> <li>${severity}\u00a0\u2013 Severity of each vulnerability.</li> <li>${likelihood}\u00a0\u2013 Likelihood of the vulnerability</li> <li>${impact}\u00a0\u2013 Impact of the vulnerability</li> <li>${cvssScore}\u00a0\u2013 CVSS score of the vulnerability</li> <li>${cvssString}\u00a0\u2013 CVSS vector of the vulnerability</li> <li>${count}\u00a0\u2013 Row Count of the vulnerability</li> <li>${tracking}\u00a0\u2013 Tracking number of the vulnerability</li> <li>${vid}\u00a0\u2013 Vulnerability internal database id</li> <li>${cfXXXXXX}\u00a0\u2013 Custom Fields are ones you specify in the admin interface. These are all prefixed with \u201ccf\u201d</li> <li>${details}\u00a0\u2013 This will insert screenshots and exploit steps for each vulnerability.</li> <li>${color \u00a0key=value,key=value}\u00a0\u2013 The color of the text is based on key-value pairs.\u00a0See below for how to set up colors.</li> <li>${fill key=value,key=value}\u00a0\u2013 The color of the background elements is based on key-value pairs.\u00a0\u00a0See below for how to set up colors.</li> </ul>"},{"location":"Custom%20Security%20Report%20Templates/#example-block-findings","title":"Example Block Findings","text":"<p>**Why is the heading yellow?!?! Check here</p>"},{"location":"Custom%20Security%20Report%20Templates/#css-formatting","title":"CSS FORMATTING:","text":"<p>All of the text generated from Faction is HTML. You can control how it is rendered in the DOCX format using the CSS editor in the Report Designer. You will need to set the CSS to match your report templates. Things like font and size will need to match. Images will need to be forced to resize to the correct dimensions to fit in your reports.</p> <p></p>"},{"location":"Custom%20Security%20Report%20Templates/#setting-severity-colors","title":"SETTING SEVERITY COLORS:","text":"<p>When building reports you most likely will set the text or cell to the color that matches the severity of the finding. To achieve this in FACTION you need to set a default color in the docx template that matches the severity category (i.e. Overall, Likelihood, and Impact). These default colors are in the table below:</p> Category Color Hex Overall Severity #FAC701 Likelihood #FAC702 Impact #FAC703 <p>For Example, a table in MS Word below has pre-filled the color codes for each severity name and category.</p> <p></p> <p>Right-click the overall severity variable,\u00a0${severity}; you can see the default hex code for this color is #FAC701. Likelihood would be set to #FAC02, and Impact would be set to #FAC703.</p> <p></p> <p>Setting the background color for cells works in much the same way. Notice we use the ${cells} variable instead.</p> <p></p> <p>Right-click on the cell and set the color you may only want to use the Overall severity option but you can have multiple cells with each category if you wish.</p> <p></p> <p>Below is an example of the generated report table with colors replaced.</p> <p></p>"},{"location":"Custom%20Variables/","title":"Custom Variables","text":"<p>You can use custom variables to add additional features to Faction. These variables can be used to add additional information to vulnerabilities like a CVSS score or to populate additional data in reports like \"product owner\", \"cost center\", etc. </p>"},{"location":"Custom%20Variables/#adding-a-cvss-score","title":"Adding a CVSS Score","text":"<p>As of Faction version 1.1.25.1, Faction does not have CVSS scores built in but you can add your own easily.  </p>"},{"location":"Custom%20Variables/#step-1-add-custom-fields-in-admin","title":"Step 1 : Add Custom Fields in Admin","text":"<p>Navigate to Admin -&gt; Settings and add two Custom Fields: CVSS3.1 and CVSS String with variable names <code>cvss3</code> and <code>cvssstring</code>.</p> <p></p> <p>The Name will be what is displayed in the UI and the variable name will be used in the report template. We want to apply this to Vulnerability so that it will be available when we add vulnerabilities to the assessment.</p>"},{"location":"Custom%20Variables/#step-2-update-the-report-template","title":"Step 2: Update the Report Template","text":"<p>We need to change our report template to include the new variables in the vulnerability section of the template. In this case, we already have a table with vulnerability information and we need to add another row to this table with the new variables. The default template can be downloaded here.</p> <p></p> <p>Notice all custom field variables are pre-populated with <code>cf</code>.  If we defined a custom field with a variable of <code>cvss3</code> then the reporting variable will be <code>${cfcvss3}</code>. </p> <p>Note: We needed to change the <code>loop</code> variable to inform the Faction reporting engine that the number of rows in the table has changed from 4 to 5. If you are not changing the number of rows then this update is not necessary. </p>"},{"location":"Custom%20Variables/#step-3-add-a-new-vulnerability-to-the-assessment","title":"Step 3: Add a New Vulnerability to the Assessment","text":"<p>When you add a vulnerability to the assessment the custom fields will be available in the form as shown below:</p> <p></p> <p>Entering the CVSS score will be automatically saved and a report can now be generated with these new Fields. </p> <p></p>"},{"location":"Extending%20FACTION/","title":"Extending FACTION","text":"<p>Faction can extend its functionality on the server side. If you are familiar with writing BurpSuite extensions then this process should be somewhat familiar to you. If you are not it\u2019s OK. We will walk through the specifics below.</p> <p>In this example, we will create a JIRA plugin that will create issues for each vulnerability when the assessment is finalized.</p> <p>The source code for this example can be\u00a0downloaded here.</p>"},{"location":"Extending%20FACTION/#faction-dev-environment","title":"Faction Dev Environment","text":"<ol> <li>Create a new Eclipse Maven Java Project</li> <li>Add the following lines to your\u00a0pom.xml\u00a0file to enable the Faction Extendar API. This adds the Extendar API Repository location, the Extendar Library, and configures the build plugin, and Manifest file. <pre><code>&lt;repositories&gt;\n   &lt;repository&gt;\n      &lt;id&gt;FactionExtender&lt;/id&gt;\n      &lt;url&gt;https://github.com/factionsecurity/faction-extender/raw/mvn-repo/&lt;/url&gt;\n      &lt;snapshots&gt;\n         &lt;enabled&gt;true&lt;/enabled&gt;\n         &lt;updatePolicy&gt;always&lt;/updatePolicy&gt;\n      &lt;/snapshots&gt;\n   &lt;/repository&gt;\n&lt;/repositories&gt;\n&lt;dependencies&gt;\n   &lt;dependency&gt;\n      &lt;groupId&gt;FactionExtender&lt;/groupId&gt;\n      &lt;artifactId&gt;FactionExtender&lt;/artifactId&gt;\n      &lt;version&gt;1.1&lt;/version&gt;\n   &lt;/dependency&gt;\n&lt;/dependencies&gt;\n&lt;build&gt;\n   &lt;plugins&gt;\n      &lt;plugin&gt;\n         &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n         &lt;configuration&gt;\n         &lt;descriptorRefs&gt;\n            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n         &lt;/descriptorRefs&gt;\n         &lt;archive&gt; \n            &lt;manifestEntries&gt;\n               &lt;Import-Library&gt;org.faction.JiraPlugin&lt;/Import-Library&gt;\n            &lt;/manifestEntries&gt;\n         &lt;/archive&gt;\n         &lt;/configuration&gt;\n       &lt;/plugin&gt;\n   &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre> The\u00a0maven-assembly-plugin\u00a0contains the manifest entries which is important for Faction to be able to find the correct class files to run. You will need to update the\u00a0Import-Library\u00a0directive to point to your class.</li> </ol>"},{"location":"Extending%20FACTION/#create-the-jira-plugin-class","title":"Create The Jira Plugin Class","text":"<p>Create a Class named\u00a0JiraPlugin\u00a0in\u00a0src/main/java. This class will implement\u00a0\u00a0com.fuse.extender.AssessmentManager\u00a0as shown below. This code will trigger whenever a change happens to an assessment. You can use the\u00a0Operation\u00a0enum to control what happens as different events change the assessment.</p> <pre><code>public class JiraPlugin implements com.fuse.extender.AssessmentManager{\n     @Override\n     public Object[] assessmentChange(Assessment assessment, List&lt;Vulnerability&gt; vulnerabilities, Operation arg2) {\n            return new Object [] {assessment, vulnerabilities};\n     }\n}\n</code></pre> <p>Note that above it returns\u00a0Object [] {assessment, vulnerabilities}.\u00a0This will update Faction\u2019s database if the values change when this function returns. If you Return\u00a0null\u00a0it will NOT update Faction and only just send/process information.</p>"},{"location":"Extending%20FACTION/#putting-it-all-together","title":"Putting It All Together","text":"<p>Now we have a basic functional block of code we need to make it perform the action of sending all vulnerabilities to Jira only when the assessment is finalized. To do this we create an if statement that checks the Operation enum equals Finalized.</p> <pre><code>import com.fuse.elements.Assessment;\nimport com.fuse.elements.Vulnerability;\n\npublic class JiraPlugin implements com.fuse.extender.AssessmentManager{\n\n    @Override\n    public Object[] assessmentChange(Assessment assessment, List&lt;Vulnerability&gt; vulns, Operation opcode) {\n\n        if(opcode == Operation.Finalize) {\n            //Integration into vulnerability management system\n            for(Vulnerability vuln : vulns) {\n                //this can update vulns and send the updated values back into Faction\n                String issueId = sendVulnerbilityToJira(vuln);\n                if(issueId != null) {\n                    vuln.setTracking(issueId);\n                }\n            }\n        }\n        return new Object [] {assessment, vulns};\n    }\n}\n</code></pre> <p>Now we just need to add the following supporting functions to send the issues to Jira using their\u00a0REST API.\u00a0Note: To use this code you need to update the Environment Variables to use your Jira Hostname and API key. You also need to update the Project key to match your projects.</p> <pre><code>import java.util.Base64;\nimport java.util.List;\n\nimport com.fuse.elements.Assessment;\nimport com.fuse.elements.Vulnerability;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\n\npublic class JiraPlugin implements com.fuse.extender.AssessmentManager{\n\n    @Override\n    public Object[] assessmentChange(Assessment assessment, List vulns, Operation opcode) {\n\n        if(opcode == Operation.Finalize) {\n            //Integration into vulnerability management system\n            for(Vulnerability vuln : vulns) {\n                //this can update vulns and send the updated values back into Faction\n                String issueId = sendVulnerbilityToJira(vuln);\n                if(issueId != null) {\n                    vuln.setTracking(issueId);\n                }\n            }\n        }\n        return new Object [] {assessment, vulns};\n    }\n\n    public String sendVulnerbilityToJira(Vulnerability vuln) {\n\n        JSONObject issueType = new JSONObject();\n        issueType.put(\"name\", \"Bug\");\n\n        JSONObject project = new JSONObject();\n        project.put(\"key\", \"KAN\"); //Change this\n\n        JSONObject fields = new JSONObject();\n        fields.put(\"summary\", vuln.getName());\n        fields.put(\"description\", vuln.getDescription());\n        fields.put(\"project\", project);\n        fields.put(\"issuetype\", issueType);\n\n        JSONObject issue = new JSONObject();\n        issue.put(\"fields\", fields);\n        String jiraHost = System.getenv(\"JIRA_HOST\");\n        String jiraURL = String.format(\"%s%s\", jiraHost, \"rest/api/2/issue/\");\n        return httpPost(jiraURL, issue);\n    }\n\n    private String base64(String data) {\n        return \"Basic \" +Base64.getEncoder().encodeToString(data.getBytes());\n    }\n\n    private String httpPost(String url, JSONObject payload) {\n        HttpClient httpClient = HttpClientBuilder.create().build();\n        String apiKey = System.getenv(\"JIRA_API_KEY\");\n        try {\n            HttpPost request = new HttpPost(url);\n            StringEntity params = new StringEntity(payload.toJSONString());\n            request.addHeader(\"content-type\", \"application/json\");\n            request.addHeader(\"Authorization\", base64(apiKey));\n            request.setEntity(params);\n            HttpResponse response = httpClient.execute(request);\n            if( response.getStatusLine().getStatusCode() == 201) {\n                String json = EntityUtils.toString(response.getEntity());\n                JSONParser parser = new JSONParser();\n                JSONObject jsonObj = (JSONObject) parser.parse(json);\n                return (String) jsonObj.get(\"id\");\n            }else {\n                return null;\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return \"\";\n        } \n\n    }\n}\n</code></pre>"},{"location":"Extending%20FACTION/#install-it-in-your-faction","title":"Install It In Your Faction","text":"<p>Build the jar file by running: <pre><code>mvn clean compile assembly:single\n</code></pre></p> <p>This will create a jar file named\u00a0JiraPlugin-0.0.1-SNAPSHOT-jar-with-dependencies.jar\u00a0in your ./target folder.\u00a0</p> <p>To run it on Faction, you need to copy\u00a0JiraPlugin-0.0.1-SNAPSHOT-jar-with-dependencies.jar\u00a0into the\u00a0/opt/faction/modules/\u00a0folder on your server. The Faction web server with automatically pick up this change without restarting and will execute your custom code when when the assessment is finalized.\u00a0</p> <p>Now when an assessment is finalized it will add All the findings to JIRA as shown in the following screenshot:</p> <p></p>"},{"location":"FACTION%20Plugin%20Extension%20API/","title":"FACTION Plugin Extension API","text":""},{"location":"FACTION%20Plugin%20Extension%20API/#introduction","title":"Introduction","text":"<p>Faction has an API similar to what you might find in BurpSuite Extensions. You can create custom modules in jar files and copy them to the server and Faction will automatically pick them up and do your custom processing on certain events.</p> <p>You can extend things like Application Inventory Search so that it queries an external database to return results before scheduling assessments.</p> <p>If you have configured custom fields you can write an extension to search another database and update things like application owner or other metadata about the application that Faction does not support by default.</p> <p>You can download an example\u00a0Extension here.</p> <p>Below is a list of the current Hooks:</p>"},{"location":"FACTION%20Plugin%20Extension%20API/#faction-extension-apis","title":"Faction Extension APIs","text":""},{"location":"FACTION%20Plugin%20Extension%20API/#application-inventory-extension","title":"Application Inventory Extension","text":"<p><pre><code>public class MyPlugin implements com.fuse.extender.ApplicationInventory{\n\n    @Override\n    public InventoryResult[] search(String arg0, String arg1) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n}\n</code></pre> - Triggers on Assessment Scheduling and will then query external sources instead of the local database. - Can search based on Application ID or Application name. It will return an InventoryResult Object (explained later)</p>"},{"location":"FACTION%20Plugin%20Extension%20API/#assessment-manager-extension","title":"Assessment Manager Extension","text":"<p><pre><code>public class MyPlugin implements com.fuse.extender.AssessmentManager{\n\n    @Override\n    public Object[] assessmentChange(Assessment arg0, List&lt;Vulnerability&gt; arg1, Operation arg2) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n}\n</code></pre> Typical use case scenario: When an assessor finalizes an assessment this module can send all the vulnerabilities to another tracking system like JIRA and return the tracking numbers to Faction.</p> <ul> <li>Triggers on Assessment Create, Update, Delete, Finalized, Peer Review Created, Peer Review Complete, Peer Review Accepted</li> <li>Accepts the Triggered Assessment and List of vulnerabilities associated with the assessment.</li> <li>Returns an Object Array that is the updated Assessment and updated List of vulnerabilities</li> <li>If the return object is null Faction will not update locally</li> </ul>"},{"location":"FACTION%20Plugin%20Extension%20API/#vulnerability-manager-extension","title":"Vulnerability\u00a0Manager Extension","text":"<p><pre><code>public class MyPlugin implements com.fuse.extender.VulnerabilityManager{\n\n    @Override\n    public Vulnerability vulnChange(Assessment arg0, Vulnerability arg1, Operation arg2) {\n        // TODO Auto-generated method stub\n        return null;\n    }\n}\n</code></pre> Typical use case scenario: When an assessor creates or updates a vulnerability the module can send\u00a0the\u00a0vulnerability to another tracking system like JIRA and return the tracking\u00a0number to Faction.</p> <ul> <li>Triggers on Assessment Create, Update, Delete</li> <li>Accepts the Triggered Assessment and vulnerability that is being processed.</li> <li>Returns\u00a0the updated vulnerability</li> <li>If the return object is null then Faction will not update locally</li> </ul>"},{"location":"FACTION%20Plugin%20Extension%20API/#verificationretest-manager-extension","title":"Verification(Retest) Manager Extension","text":"<pre><code>public class MyPlugin implements com.fuse.extender.VerificationManager{\n\n    @Override\n    public void verificationChange(User arg0, Vulnerability arg1, String arg2, Date arg3, Date arg4, Operation arg5) {\n        // TODO Auto-generated method stub\n\n    }\n}\n</code></pre> <ul> <li>Triggers on\u00a0Pass, Fail, Cancel, Assigned</li> <li>Accepts the Triggered\u00a0Assigned User, Vulnerability Assigned, Start and end dates for the verification.</li> <li>Returns\u00a0the updated vulnerability</li> </ul>"},{"location":"FACTION%20Plugin%20Extension%20API/#additional-resources","title":"Additional Resources","text":"<ul> <li>Building a JIRA Extension</li> </ul>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/","title":"Importing Your Vulnerability Templates Via the API","text":"<p>You may have developed your own vulnerability templates over the years, or you may prefer editing them in another editor such as Obsidian or Sublime, rather than using the web interface. Regardless of your approach, Faction enables you to upload your templates in CSV and JSON formats via the API. Additionally, reports can be generated in markdown, HTML, or a combination of both.</p> <p>The api docs can be found on your instance by navigating to  https: //YourHost/api-docs: </p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#generating-an-api-key","title":"Generating an API Key","text":"<p>You must have the <code>API Key</code> permission on your user to use the API. It it not set by default.  </p> <p>After enabling the setting, you can access your API Key by navigating to your profile, located in the upper right corner of the Faction interface. Simply clicking anywhere inside the API key box will reveal the key to you. </p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#csv-file-structure","title":"CSV File Structure","text":"Id* Name Category Id* Category Name* Description Recommendation Severity Id Impact Id Likelihood Id active <p>If the ID field is empty, a new vulnerability will be created. If the ID field is populated, it will overwrite the vulnerability with the same ID.</p> <p>If the Category ID is missing, the categoryName field is required. If a category with the same name exists, the existing category will be used.</p> <p>If the categoryName does not match an existing category, a new category will be created.</p> <p>If the Category ID is populated, the Category Name field is ignored.</p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#example-1-create-a-new-vulnerability-template-in-csv","title":"Example 1: Create a New Vulnerability Template in CSV","text":"<p>Example CSV <pre><code>,\"Cross Site Scripting\",, Unvalidated Input, \"XSS is Bad and stuff..\\n```\\nCode snippet\\n```\", \"Fix it! here is a link [here](https://www.a.b.com)\", 4, 4,4,true\n</code></pre></p> <p>The provided example will create a new template for cross-site scripting. Here are a few key points to note:</p> <ol> <li> <p>The first column (ID column) is left blank. Since there is no ID specified, a new template will be created.</p> </li> <li> <p>The third column (Category ID) is also blank, so Faction will refer to the fourth column (Category Name). If <code>Unvalidated Input</code> is not already a category in Faction, it will be created.</p> </li> <li> <p>The Description and Recommendation fields are written in markdown syntax. Ensure that these columns are enclosed in double quotes (<code>\"</code>) and that new lines are properly escaped (<code>\\n</code>).</p> </li> <li> <p>The severity IDs must correspond to the severity levels configured in Faction. You can find these numbers in Admin-&gt;Settings-&gt; Risk Level Settings. The default severity levels are: Critical (5), High (4), Medium (3), Low (2), Recommended (1), Informational (0). Ensure that the severity IDs match these levels accordingly.</p> </li> </ol> <p>Submit through the API <pre><code>curl -X 'POST' \\ \n'http://localhost:8080/api/vulnerabilities/csv/default' \\ \n-H 'accept: application/json' \\ \n-H 'FACTION-API-KEY: 6be51daa-6f6f-42d3-8b04-b924a0045eff' \\ \n-H 'Content-Type: text/plain' \\ \n-d ',\"Cross Site Scripting\",, Unvalidated Input, \"XSS is Bad and stuff..\\n```\\nCode snippet\\n```\", \"Fix it! here is a link [here](https://www.a.b.com)\", 4, 4,4,true'\n</code></pre></p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#example-2-updating-a-vulnerability-template-in-csv","title":"Example 2: Updating a Vulnerability Template in CSV","text":"<p>First, you need to download the current list of vulnerabilities from the API.</p> <p>Get a CSV List of Default Vulnerabilities <pre><code>curl -X 'GET' \\ \n'http://localhost:8080/api/vulnerabilities/csv/default' \\ \n-H 'accept: text/csv' \\ \n-H 'FACTION-API-KEY: 6be51daa-6f6f-42d3-8b04-b924a0045eff'\n</code></pre></p> <p>Example Response: <pre><code>\"2\",\"Generic Vulnerability\",\"2\",\"Uncategorized\",\"\",\"\",\"4\",\"4\",\"4\",\"true\" \"18\",\"Cross Site Scripting\",\"4\",\"Unvalidated Input\",\"&lt;p&gt;XSS is Bad and stuff..&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Code snippet &lt;/code&gt;&lt;/pre&gt; &lt;br /&gt;\",\"&lt;p&gt;Fix it! here is a link &lt;a href=\"\"https://www.a.b.com\"\"&gt;here&lt;/a&gt;&lt;/p&gt; &lt;br /&gt;\",\"4\",\"4\",\"4\",\"true\"\n</code></pre></p> <p>Now to Update a Template Let's update the Cross Site Scripting Template by changing the description to the following. <pre><code>XSS is fun to exploit with this code snippet\\n ```\\nSnipity snip\\n```\n</code></pre></p> <p>The API Request would look like this: <pre><code>curl -X 'POST' \\ \n'http://localhost:8080/api/vulnerabilities/csv/default' \\ \n-H 'accept: application/json' \\ \n-H 'FACTION-API-KEY: 6be51daa-6f6f-42d3-8b04-b924a0045eff' \\ \n-H 'Content-Type: text/plain' \\ \n-d '\"18\",\"Cross Site Scripting\",\"4\",\"Unvalidated Input\",\"XSS is fun to exploit with this code snippet\\n ```\\nSnipity snip\\n```\",\"&lt;p&gt;Fix it! here is a link &lt;a href=\"\"https://www.a.b.com\"\"&gt;here&lt;/a&gt;&lt;/p&gt; &lt;br /&gt;\",\"4\",\"4\",\"4\",\"true\"'\n</code></pre></p> <p>Now if we pull the list again the results look like this: Request <pre><code>curl -X 'GET' \\ \n'http://localhost:8080/api/vulnerabilities/csv/default' \\ \n-H 'accept: text/csv' \\ \n-H 'FACTION-API-KEY: 6be51daa-6f6f-42d3-8b04-b924a0045eff'\n</code></pre></p> <p>Response <pre><code>\"2\",\"Generic Vulnerability\",\"2\",\"Uncategorized\",\"\",\"\",\"4\",\"4\",\"4\",\"true\" \"18\",\"Cross Site Scripting\",\"4\",\"Unvalidated Input\",\"&lt;p&gt;XSS is fun to exploit with this code snippet&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Snipity snip &lt;/code&gt;&lt;/pre&gt; &lt;br /&gt;\",\"&lt;p&gt;Fix it! here is a link &lt;a href=\"\"https://www.a.b.com\"\"&gt;here&lt;/a&gt;&lt;/p&gt; &lt;br /&gt; &lt;br /&gt;\",\"4\",\"4\",\"4\",\"true\"\n</code></pre></p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#json-file-structure","title":"JSON File Structure","text":"<pre><code>  [\n      {\n        \"Id\": 2,\n        \"Name\": \"Generic Vulnerability\",\n        \"CategoryId\": 2,\n        \"CategoryName\": \"Uncategorized\",\n        \"Description\": \"\",\n        \"Recommendation\": \"\",\n        \"SeverityId\": 4,\n        \"LikelihoodId\": 4,\n        \"ImpactId\": 4,\n        \"Active\": true\n      }\n  ]\n</code></pre> <p>If the ID is missing, a new vulnerability will be created. If the ID is populated, it will overwrite the vulnerability with the same ID.</p> <p>If the Category ID is missing, the categoryName is required. If a category with the same name exists, the existing category will be used.</p> <p>If the categoryName does not match an existing category, a new category will be created.</p> <p>If the Category ID is populated, the Category Name field is ignored.</p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#example-1-create-all-new-vulnerability-template-in-json","title":"Example 1: Create All New Vulnerability Template in JSON","text":"<p>Example JSON</p> <pre><code>[\n    {\n        \"Name\": \"Cross Site Scripting\",\n        \"CategoryName\": \"Unvalidated Input\",\n        \"Description\": \"XSS is Bad and stuff..\\n```\\nCode snippet\\n```\",\n        \"Recommendation\": \"Fix it! here is a link [here](https://www.a.b.com)\",\n        \"LikelihoodId\": 4,\n        \"ImpactId\": 4,\n        \"SeverityId\": 4,\n        \"Active\": true\n    }\n]\n</code></pre> <p>The provided example will create a new template for cross-site scripting. Here are a few key points to note:</p> <ol> <li> <p>The ID is missing. Since there isn't an ID to relate it, a new template will be created.</p> </li> <li> <p>The CategoryId is missing, so Faction will need to look at the CategoryName. If <code>Unvalidated Input</code> is not already a category, then Faction will create it.</p> </li> <li> <p>The Description and Recommendation fields are written in markdown syntax.</p> </li> <li> <p>Ensure that the severity IDs match the severity levels you have set in Faction. You can find these numbers in Admin-&gt;Settings-&gt; Risk Level Settings. The defaults are Critical (5), High (4), Medium (3), Low (2), Recommended (1), Informational (0).</p> </li> </ol> <p>The API Request looks like this to add this vulnerability template: <pre><code>curl -X 'POST' \\ \n'http://localhost:8080/api/vulnerabilities/default' \\ \n-H 'accept: application/json' \\ \n-H 'FACTION-API-KEY: a0d2fff7-7462-458c-ba7b-d93d99b7280a' \\ \n-H 'Content-Type: application/json' \\ \n-d '[ \n    { \n        \"Name\": \"Cross Site Scripting\", \n        \"CategoryName\": \"Unvalidated Input\", \n        \"Description\": \"XSS is Bad and stuff..\\n```\\nCode snippet\\n```\",\n        \"Recommendation\": \"Fix it! here is a link [here](https://www.a.b.com)\",\n        \"LikelihoodId\": 4, \n        \"ImpactId\": 4, \n        \"SeverityId\": 4, \n        \"Active\": true \n    } \n]'\n</code></pre></p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#example-2-updating-a-vulnerability-template-in-json","title":"Example 2: Updating a Vulnerability Template in JSON","text":"<p>First, you need to download the current list of vulnerabilities from the API.</p> <p>Get a JSON List of Default Vulnerabilities <pre><code>curl -X 'GET' \\ \n'http://localhost:8080/api/vulnerabilities/default' \\ \n-H 'accept: application/json' \\ \n-H 'FACTION-API-KEY: a0d2fff7-7462-458c-ba7b-d93d99b7280a'\n</code></pre></p> <p>Response: <pre><code>[\n  {\n    \"CategoryId\": 2,\n    \"ImpactId\": 4,\n    \"Active\": true,\n    \"Description\": \"\",\n    \"CategoryName\": \"Uncategorized\",\n    \"LikelihoodId\": 4,\n    \"Id\": 2,\n    \"Recommendation\": \"\",\n    \"SeverityId\": 4,\n    \"Name\": \"Generic Vulnerability\"\n  },\n  {\n    \"CategoryId\": 4,\n    \"ImpactId\": 4,\n    \"Active\": true,\n    \"Description\": \"XSS is Bad and stuff..\\n```\\nCode snippet\\n```\",\n    \"CategoryName\": \"Unvalidated Input\",\n    \"LikelihoodId\": 4,\n    \"Id\": 5,\n    \"Recommendation\": \"Fix it! here is a link [here](https://www.a.b.com)\",\n    \"SeverityId\": 4,\n    \"Name\": \"Cross Site Scripting\"\n  }\n]\n</code></pre></p> <p>Now to Update a Template Let's update the Cross-Site Scripting Template by changing the description to the following. <pre><code>XSS is fun to exploit with this code snippet\\n ```\\nSnipity snip\\n```\n</code></pre></p> <p>The API Request would look like this: <pre><code>curl -X 'POST' \\\n  'http://localhost:8080/api/vulnerabilities/default' \\\n  -H 'accept: application/json' \\\n  -H 'FACTION-API-KEY: a0d2fff7-7462-458c-ba7b-d93d99b7280a' \\\n  -H 'Content-Type: application/json' \\\n  -d '[ {\n    \"CategoryId\": 4,\n    \"ImpactId\": 4,\n    \"Active\": true,\n    \"Description\": \"XSS is fun to exploit with this code snippet\\n ```\\nSnipity snip\\n```\",\n    \"CategoryName\": \"Unvalidated Input\",\n    \"LikelihoodId\": 4,\n    \"Id\": 5,\n    \"Recommendation\": \"Fix it! here is a link [here](https://www.a.b.com)\",\n    \"SeverityId\": 4,\n    \"Name\": \"Cross Site Scripting\"\n  }]'\n</code></pre></p> <p>Now if we pull the list again the results look like this: Request <pre><code>curl -X 'GET' \\ \n'http://localhost:8080/api/vulnerabilities/default' \\ \n-H 'accept: text/csv' \\ \n-H 'FACTION-API-KEY: 6be51daa-6f6f-42d3-8b04-b924a0045eff'\n</code></pre></p> <p>Response <pre><code>[\n  {\n    \"CategoryId\": 2,\n    \"ImpactId\": 4,\n    \"Active\": true,\n    \"Description\": \"\",\n    \"CategoryName\": \"Uncategorized\",\n    \"LikelihoodId\": 4,\n    \"Id\": 2,\n    \"Recommendation\": \"\",\n    \"SeverityId\": 4,\n    \"Name\": \"Generic Vulnerability\"\n  },\n  {\n    \"CategoryId\": 4,\n    \"ImpactId\": 4,\n    \"Active\": true,\n    \"Description\": \"&lt;p&gt;XSS is fun to exploit with this code snippet&lt;/p&gt;\\n&lt;pre&gt;&lt;code&gt;Snipity snip\\n&lt;/code&gt;&lt;/pre&gt;\\n&lt;br /&gt;\",\n    \"CategoryName\": \"Unvalidated Input\",\n    \"LikelihoodId\": 4,\n    \"Id\": 5,\n    \"Recommendation\": \"&lt;p&gt;Fix it! here is a link &lt;a href=\\\"https://www.a.b.com\\\"&gt;here&lt;/a&gt;&lt;/p&gt;\\n&lt;br /&gt;\",\n    \"SeverityId\": 4,\n    \"Name\": \"Cross Site Scripting\"\n  }\n]\n</code></pre></p>"},{"location":"Importing%20Your%20Vulnerability%20Templates%20Via%20the%20API/#using-swagger","title":"Using Swagger","text":"<p>Instead of using CURL as show above you can use the API docs pages to submit directly to your API to test things out. </p> <p>Just navigate to <code>https: //YourHost/api-docs</code> and select any of the API's available. You will need your API Key that can be found in your profile.</p> <p>Below is an example of using swagger to update a Template with JSON. </p>"},{"location":"Integrate%20Faction%20into%20OAuth%20Solutions/","title":"Integrate Faction into OAuth Solutions","text":"<p>Faction seamlessly integrates with your existing enterprise authentication solutions, ensuring a smooth and secure user experience. Leveraging widely adopted solutions such as LDAP and OAuth, Faction effortlessly integrates into any enterprise environment. Our platform is designed to adapt to your authentication infrastructure, providing a hassle-free implementation process and enhancing the overall efficiency of your organization\u2019s security framework. With Faction, you can trust in a unified and streamlined authentication experience tailored to your enterprise needs.</p> <p>The article will walk through the steps needed to integrate\u00a0Faction\u00a0into\u00a0Google Auth\u00a0or\u00a0Auth0.</p>"},{"location":"Integrate%20Faction%20into%20OAuth%20Solutions/#google-oauth-setup","title":"Google OAuth Setup","text":"<ol> <li>Log into your company\u2019s\u00a0Google API Console.</li> <li>Click on\u00a0Credentials\u00a0from the left navigation.</li> <li>Click\u00a0+ Create Credentials\u00a0from the top navigation.</li> <li>Select\u00a0OAuth Client ID.</li> <li>Select\u00a0Web Application\u00a0as the application type.</li> <li>Name the application something specific like\u00a0Faction OAuth Integration.\u00a0But the name does not matter.</li> <li>Under\u00a0Authorized redirect URLs\u00a0click\u00a0+ ADD URI.</li> <li>Enter the domain of your Faction Instance and append\u00a0/oauth/callback?client_name=OidcClient\u00a0to the path. Example: If you used Faction to host the site your URL would look like this:     https://furry-hyena-1111.factionsecurity.com/oauth/callback?client_name=OidcClient</li> <li>Then Click\u00a0Create.</li> <li>Take Note of the\u00a0Client Id\u00a0and\u00a0Client Secret. This will be used later in the Faction Admin Section.</li> </ol> <p>Your Setup should look like the following: </p>"},{"location":"Integrate%20Faction%20into%20OAuth%20Solutions/#auth0-oauth-setup","title":"Auth0 OAuth Setup","text":"<ol> <li>Log into your\u00a0Auth0 Console.</li> <li>Select\u00a0Applications\u00a0in the left navigation.</li> <li>Click\u00a0+ Create Application</li> <li>Select\u00a0Regular Web Application. </li> <li>Name it something like\u00a0Faction OAuth Integration.</li> <li>Click\u00a0Create.</li> <li>Ignore the Quick Start screen and Click\u00a0Settings.</li> <li>In the\u00a0Allowed Callback URLs, enter the domain of your Faction Instance and append\u00a0/oauth/callback?client_name=OidcClient\u00a0to the path.  Example: If you used\u00a0Faction\u00a0to host the site your URL would look like: https://furry-hyena-1111.factionsecurity.com/oauth/callback?client_name=OidcClient </li> <li>Take Note of the\u00a0Client Id\u00a0and\u00a0Client Secret. This will be used later in the Faction Admin.</li> <li>Scroll down to the bottom and Click\u00a0Advanced\u00a0and then\u00a0Endpoints</li> <li>Take note of the\u00a0OpenId Configuration\u00a0URL     </li> </ol>"},{"location":"Integrate%20Faction%20into%20OAuth%20Solutions/#configure-faction","title":"Configure Faction","text":"<ol> <li>Log into\u00a0Faction\u00a0as an admin user.</li> <li>Navigate to\u00a0Admin\u00a0-&gt;\u00a0Users.</li> <li>In the\u00a0OAuth2.0 Configuration\u00a0enter the Client Id you noted earlier from either Auth0 or Google.</li> <li>Enter the\u00a0Client Secret\u00a0you noted earlier.</li> <li>Enter the\u00a0Discovery URL\u00a0as follows:Google: https://accounts.google.com/.well-known/openid-configuration Auth0:\u00a0Enter the\u00a0Open Id Configuration\u00a0URL you noted in step 11 above.</li> <li>Click\u00a0Save </li> </ol>"},{"location":"Integrate%20Faction%20into%20OAuth%20Solutions/#adding-an-oauth-user","title":"Adding an OAuth User","text":"<ol> <li>Under\u00a0Admin -&gt; Users, Click\u00a0Add User.</li> <li>The Username should be part of the user\u2019s email address before the @ symbol. If the email is\u00a0test.user@yourcompany.com\u00a0then the username is test.user</li> <li>\u2b50\ufe0fLeave the Password Field Blank.\u2b50\ufe0f</li> <li>Enter the\u00a0First\u00a0and\u00a0Last\u00a0name.</li> <li>Enter the\u00a0email\u00a0address that is used by the OAuth solution to authenticate the user.</li> <li>Select\u00a0OAuth 2.0\u00a0as the Authentication Method.</li> <li>Click\u00a0Save Changes.</li> </ol> <p>When the new user reaches the Login Screen they can enter just their username without a password and click\u00a0Login. Faction will redirect the user to the configured Authentication Provider and redirect back.</p>"},{"location":"Managed%20FACTION%20Setup/","title":"Managed FACTION Setup","text":"<p>Below are the Minimal Faction Setup Instructions required to get you all set up and ready to start collaborating on assessments in just a few minutes. With a Faction managed account, we host the servers and maintain the updates for you. Your instance will be hosted in a single-tenant environment to ensure your data is secure. With just a few clicks you will be up and running in minutes. </p>"},{"location":"Managed%20FACTION%20Setup/#create-your-managed-account","title":"Create Your Managed Account","text":"<p>Every account that gets created will get its own single-tenant instance. To create a new instance go to\u00a0https://portal.factionsecurity.com,\u00a0Create an Account, and Select a teir that meets your team's needs.</p> <p></p> <p>This will begin creating your instance of Faction. Wait until the spinner shows a green checkbox before you attempt to access your site. You can then click the URL in the site list to take you to your new Faction Instance.</p> <p></p>"},{"location":"Managed%20FACTION%20Setup/#create-an-admin-user","title":"Create an Admin User","text":"<p>The first time you access Faction you will be presented with a page to create your admin account. Here you need to enter basic information about the user and the option to create a team.\u00a0Hacking Team\u00a0is the default.</p> <p></p>"},{"location":"Managed%20FACTION%20Setup/#adding-default-vulnerability-templates","title":"Adding Default Vulnerability Templates","text":"<p>The Faction Default vulnerability database is what makes generating reports quick and painless for pen-testing teams. You can upload your templates or start with an open-source list from\u00a0https://github.com/factionsecurity/data</p> <p>To add the VulnDB data into Faction just navigate to\u00a0Admin-&gt;\u00a0Default Vulnerabilities\u00a0and click\u00a0Update from VulnDB. This will import all of their vulnerabilities and set default Categories for the vulnerabilities.</p> <p></p>"},{"location":"Managed%20FACTION%20Setup/#setting-custom-risk-levels-optional","title":"Setting Custom Risk Levels (Optional)","text":"<p>By default, Faction adds\u00a0Critical,\u00a0High,\u00a0Medium,\u00a0Low,\u00a0Recommended, and\u00a0Informational\u00a0risk levels but you have up to 9 that can be set and the defaults can be changed to anything that works for your environment. For instance,\u00a0Critical\u00a0can be changed to\u00a0Priority 1.</p> <p></p>"},{"location":"Managed%20FACTION%20Setup/#vulnerability-tracking-and-remediation-slas","title":"Vulnerability Tracking and Remediation SLAs","text":"<p>Different Tiers allow enhanced features within Faction. The\u00a0Teams Tier\u00a0and above have verification and vulnerability tracking enabled. In\u00a0Admin Settings\u00a0you can set custom times to alert when the vulnerability needs to be remediated based on its risk setting. For instance, you can set a reminder that a\u00a0Critical\u00a0vulnerability needs to be remediated 30 days after it's reported and set a past due date of 60 days. This will trigger Faction to alert the correct teams that important issues are close to being past due to ensure issues get closed on time and are never forgotten.</p> <p>Any values that are missing a date will not be tracked by Faction.</p> <p></p>"},{"location":"Managed%20FACTION%20Setup/#assessment-checklists","title":"Assessment Checklists","text":"<p>For some assessments, you will want to add checklists to ensure all critical issues are tested. Below is an example of some potential checks that might need to happen on every assessment to ensure applications are tested consistently.</p> <p></p> <p>Once the above is created it will be available in assessments where the assessor can pass/fail the checklist item and even add notes related to why it failed or why it\u2019s not necessary for the application being tested.</p> <p></p>"},{"location":"Managed%20FACTION%20Setup/#additional-configuration-options","title":"Additional Configuration Options","text":"<p>The higher-level tiers allow you to configure other options like LDAP and OAuth. You can find additional information below on these settings:</p> <ul> <li>Integrate Faction Into OAuth Solutions</li> <li>Customizing Faction for Self Hosting</li> <li>Extending Faction</li> </ul>"},{"location":"Self-Hosted%20FACTION%20Setup/","title":"Self Hosted FACTION Setup","text":"<p>If you decide to self-host Faction instead of using the\u00a0Managed Solution\u00a0then you will need to ensure you include the proper Environment variables so that Faction integrates into your environment.</p>"},{"location":"Self-Hosted%20FACTION%20Setup/#requirements","title":"Requirements","text":"<ul> <li>Tomcat 9</li> <li>Java 11</li> <li>Mongo 7</li> <li>maven</li> </ul>"},{"location":"Self-Hosted%20FACTION%20Setup/#option-1-docker-compose","title":"Option 1:  Docker Compose","text":"<p>Download the code from GitHub and run the following commands <pre><code>git clone git@github.com:factionsecurity/faction.git\ncd faction\nmvn clean compile war:war\ndocker-compose up --build\n</code></pre></p>"},{"location":"Self-Hosted%20FACTION%20Setup/#updating-faction","title":"Updating Faction","text":"<p>New releases can be found here. You can either pull a new release of Faction and build it yourself as shown above or If you don't want to perform the Maven install you can download the <code>faction.war</code> file directly and put it into the targets folder. </p>"},{"location":"Self-Hosted%20FACTION%20Setup/#option-2-install-tomcat-and-mongo","title":"Option 2: Install Tomcat and Mongo","text":"<p>Check back, instructions will be updated soon</p>"},{"location":"Self-Hosted%20FACTION%20Setup/#custom-environment-variables","title":"Custom Environment Variables","text":"<pre><code>## Mongo Database configs \n\nFACTION_MONGO_HOST=127.0.0.1. #requireed \nFACTION_MONGO_DATABASE=faction #required \nFACTION_MONGO_USER=faction_mongo_user #optional \nFACTION_MONGO_PASSWORD=faction_mongo_pass #optional \nFACTION_MONGO_AUTH_DATABASE=admin #optional \n\nFACTION_SECRET_KEY=faction_encryption_key #required \n\nFACTION_REPORT_STORAGE=aws #optional \nFACTION_BUCKET_NAME=your-bucket #optional \nFACTION_TIER=teams #required \nFACTION_USERS=100 #optional \n\nFACTION_SMTP_SERVER=smtp.server.com #optional \nFACTION_SMTP_USER=sysadmin #optional \nFACTION_SMTP_PORT=587 #optional\n</code></pre>"},{"location":"Self-Hosted%20FACTION%20Setup/#mongo-database-variables","title":"Mongo Database Variables","text":"<ul> <li>FACTION_MONGO_HOST\u00a0(Required):     This is the hostname or ip address where your mongo database i location</li> <li>FACTION_MONGO_DATABASE\u00a0(Required):     The name of the mongo database. This can be anything you want. On initial loading of the application it will create the database and all collections.</li> <li>FACTION_MONGO_USER\u00a0(O_ptional_):     If you use authentication (and you should) then this user has access to the database.</li> <li>FACTION_MONGO_PASSWORD\u00a0(Optional):     Only required if you use the FACTION_MONGO_USER environment variable.</li> <li>FACTION_MONGO_AUTH_DATABASE\u00a0(Optional):     The default authentication database is\u00a0admin.\u00a0If you want to use another then you can use this variable.</li> </ul>"},{"location":"Self-Hosted%20FACTION%20Setup/#other-variables","title":"Other Variables","text":"<ul> <li>FACTION_SECRET_KEY\u00a0(Required):     This is the key used for all symmetric key encryption.</li> <li>FACTION_REPORT_STORAGE\u00a0(Optional):     This variable has two options:\u00a0local\u00a0or\u00a0aws. If you include\u00a0aws\u00a0then you also need to set\u00a0AWS_ACCESS_KEY_ID\u00a0and\u00a0AWS_SECRET_ACCESS_KEY\u00a0and create the an s3 bucket location in AWS.\u00a0You can also use IAM permissions instead of including the AWS Keys.      When using\u00a0local\u00a0\u00a0the default directory location is\u00a0/opt/faction.\u00a0If this variable is not set,\u00a0local\u00a0will be used as default.</li> <li>FACTION_BUCKET_NAME\u00a0(Optional):     S3 Bucket Name to to store Faction files.</li> <li>FACTION_TIER\u00a0(Required):     Only use the value\u00a0team\u00a0here</li> <li>FACTION_USERS\u00a0(Required):     The user limit. you can set this to any value that makes sense for your organization.</li> </ul>"},{"location":"Self-Hosted%20FACTION%20Setup/#email-variables","title":"Email Variables","text":"<p>These settings (FACTION_SMTP_SERVER, FACTION_SMTP_USER&lt; FACTION_SMTP_PORT) are just used for the initial setup of Faction. They will be overridden when you save or test emails in the admin settings pages. This is useful for doing deployments in Kubernetes or ECS.</p>"}]}